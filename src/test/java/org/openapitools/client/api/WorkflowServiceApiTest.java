/*
 * Argo
 * Argo
 *
 * The version of the OpenAPI document: v2.10.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.IoArgoprojWorkflowV1alpha1Workflow;
import org.openapitools.client.model.IoArgoprojWorkflowV1alpha1WorkflowCreateRequest;
import org.openapitools.client.model.IoArgoprojWorkflowV1alpha1WorkflowLintRequest;
import org.openapitools.client.model.IoArgoprojWorkflowV1alpha1WorkflowList;
import org.openapitools.client.model.IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest;
import org.openapitools.client.model.IoArgoprojWorkflowV1alpha1WorkflowResumeRequest;
import org.openapitools.client.model.IoArgoprojWorkflowV1alpha1WorkflowRetryRequest;
import org.openapitools.client.model.IoArgoprojWorkflowV1alpha1WorkflowStopRequest;
import org.openapitools.client.model.IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest;
import org.openapitools.client.model.IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest;
import org.openapitools.client.model.IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest;
import org.openapitools.client.model.StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry;
import org.openapitools.client.model.StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WorkflowServiceApi
 */
@Ignore
public class WorkflowServiceApiTest {

    private final WorkflowServiceApi api = new WorkflowServiceApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWorkflowTest() throws ApiException {
        String namespace = null;
        IoArgoprojWorkflowV1alpha1WorkflowCreateRequest body = null;
        IoArgoprojWorkflowV1alpha1Workflow response = api.createWorkflow(namespace, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWorkflowTest() throws ApiException {
        String namespace = null;
        String name = null;
        String deleteOptionsGracePeriodSeconds = null;
        String deleteOptionsPreconditionsUid = null;
        String deleteOptionsPreconditionsResourceVersion = null;
        Boolean deleteOptionsOrphanDependents = null;
        String deleteOptionsPropagationPolicy = null;
        List<String> deleteOptionsDryRun = null;
        Object response = api.deleteWorkflow(namespace, name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWorkflowTest() throws ApiException {
        String namespace = null;
        String name = null;
        String getOptionsResourceVersion = null;
        String fields = null;
        IoArgoprojWorkflowV1alpha1Workflow response = api.getWorkflow(namespace, name, getOptionsResourceVersion, fields);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lintWorkflowTest() throws ApiException {
        String namespace = null;
        IoArgoprojWorkflowV1alpha1WorkflowLintRequest body = null;
        IoArgoprojWorkflowV1alpha1Workflow response = api.lintWorkflow(namespace, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listWorkflowsTest() throws ApiException {
        String namespace = null;
        String listOptionsLabelSelector = null;
        String listOptionsFieldSelector = null;
        Boolean listOptionsWatch = null;
        Boolean listOptionsAllowWatchBookmarks = null;
        String listOptionsResourceVersion = null;
        String listOptionsTimeoutSeconds = null;
        String listOptionsLimit = null;
        String listOptionsContinue = null;
        String fields = null;
        IoArgoprojWorkflowV1alpha1WorkflowList response = api.listWorkflows(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, fields);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void podLogsTest() throws ApiException {
        String namespace = null;
        String name = null;
        String podName = null;
        String logOptionsContainer = null;
        Boolean logOptionsFollow = null;
        Boolean logOptionsPrevious = null;
        String logOptionsSinceSeconds = null;
        String logOptionsSinceTimeSeconds = null;
        Integer logOptionsSinceTimeNanos = null;
        Boolean logOptionsTimestamps = null;
        String logOptionsTailLines = null;
        String logOptionsLimitBytes = null;
        Boolean logOptionsInsecureSkipTLSVerifyBackend = null;
        StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry response = api.podLogs(namespace, name, podName, logOptionsContainer, logOptionsFollow, logOptionsPrevious, logOptionsSinceSeconds, logOptionsSinceTimeSeconds, logOptionsSinceTimeNanos, logOptionsTimestamps, logOptionsTailLines, logOptionsLimitBytes, logOptionsInsecureSkipTLSVerifyBackend);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resubmitWorkflowTest() throws ApiException {
        String namespace = null;
        String name = null;
        IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest body = null;
        IoArgoprojWorkflowV1alpha1Workflow response = api.resubmitWorkflow(namespace, name, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resumeWorkflowTest() throws ApiException {
        String namespace = null;
        String name = null;
        IoArgoprojWorkflowV1alpha1WorkflowResumeRequest body = null;
        IoArgoprojWorkflowV1alpha1Workflow response = api.resumeWorkflow(namespace, name, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retryWorkflowTest() throws ApiException {
        String namespace = null;
        String name = null;
        IoArgoprojWorkflowV1alpha1WorkflowRetryRequest body = null;
        IoArgoprojWorkflowV1alpha1Workflow response = api.retryWorkflow(namespace, name, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopWorkflowTest() throws ApiException {
        String namespace = null;
        String name = null;
        IoArgoprojWorkflowV1alpha1WorkflowStopRequest body = null;
        IoArgoprojWorkflowV1alpha1Workflow response = api.stopWorkflow(namespace, name, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submitWorkflowTest() throws ApiException {
        String namespace = null;
        IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest body = null;
        IoArgoprojWorkflowV1alpha1Workflow response = api.submitWorkflow(namespace, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void suspendWorkflowTest() throws ApiException {
        String namespace = null;
        String name = null;
        IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest body = null;
        IoArgoprojWorkflowV1alpha1Workflow response = api.suspendWorkflow(namespace, name, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void terminateWorkflowTest() throws ApiException {
        String namespace = null;
        String name = null;
        IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest body = null;
        IoArgoprojWorkflowV1alpha1Workflow response = api.terminateWorkflow(namespace, name, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchWorkflowsTest() throws ApiException {
        String namespace = null;
        String listOptionsLabelSelector = null;
        String listOptionsFieldSelector = null;
        Boolean listOptionsWatch = null;
        Boolean listOptionsAllowWatchBookmarks = null;
        String listOptionsResourceVersion = null;
        String listOptionsTimeoutSeconds = null;
        String listOptionsLimit = null;
        String listOptionsContinue = null;
        StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent response = api.watchWorkflows(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue);

        // TODO: test validations
    }
    
}
