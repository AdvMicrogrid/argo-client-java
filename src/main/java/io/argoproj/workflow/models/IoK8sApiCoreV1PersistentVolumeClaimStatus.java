/*
 * Argo
 * Workflow Service API performs CRUD actions against application resources
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.argoproj.workflow.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.argoproj.workflow.models.IoK8sApiCoreV1PersistentVolumeClaimCondition;
import io.argoproj.workflow.models.IoK8sApiCoreV1Quantity;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * PersistentVolumeClaimStatus is the current status of a persistent volume claim.
 */
@ApiModel(description = "PersistentVolumeClaimStatus is the current status of a persistent volume claim.")

public class IoK8sApiCoreV1PersistentVolumeClaimStatus {
  public static final String SERIALIZED_NAME_ACCESS_MODES = "accessModes";
  @SerializedName(SERIALIZED_NAME_ACCESS_MODES)
  private List<String> accessModes = null;

  public static final String SERIALIZED_NAME_CAPACITY = "capacity";
  @SerializedName(SERIALIZED_NAME_CAPACITY)
  private Map<String, IoK8sApiCoreV1Quantity> capacity = null;

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<IoK8sApiCoreV1PersistentVolumeClaimCondition> conditions = null;

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private String phase;


  public IoK8sApiCoreV1PersistentVolumeClaimStatus accessModes(List<String> accessModes) {
    
    this.accessModes = accessModes;
    return this;
  }

  public IoK8sApiCoreV1PersistentVolumeClaimStatus addAccessModesItem(String accessModesItem) {
    if (this.accessModes == null) {
      this.accessModes = new ArrayList<String>();
    }
    this.accessModes.add(accessModesItem);
    return this;
  }

   /**
   * Get accessModes
   * @return accessModes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getAccessModes() {
    return accessModes;
  }


  public void setAccessModes(List<String> accessModes) {
    this.accessModes = accessModes;
  }


  public IoK8sApiCoreV1PersistentVolumeClaimStatus capacity(Map<String, IoK8sApiCoreV1Quantity> capacity) {
    
    this.capacity = capacity;
    return this;
  }

  public IoK8sApiCoreV1PersistentVolumeClaimStatus putCapacityItem(String key, IoK8sApiCoreV1Quantity capacityItem) {
    if (this.capacity == null) {
      this.capacity = new HashMap<String, IoK8sApiCoreV1Quantity>();
    }
    this.capacity.put(key, capacityItem);
    return this;
  }

   /**
   * Get capacity
   * @return capacity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, IoK8sApiCoreV1Quantity> getCapacity() {
    return capacity;
  }


  public void setCapacity(Map<String, IoK8sApiCoreV1Quantity> capacity) {
    this.capacity = capacity;
  }


  public IoK8sApiCoreV1PersistentVolumeClaimStatus conditions(List<IoK8sApiCoreV1PersistentVolumeClaimCondition> conditions) {
    
    this.conditions = conditions;
    return this;
  }

  public IoK8sApiCoreV1PersistentVolumeClaimStatus addConditionsItem(IoK8sApiCoreV1PersistentVolumeClaimCondition conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<IoK8sApiCoreV1PersistentVolumeClaimCondition>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * Get conditions
   * @return conditions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<IoK8sApiCoreV1PersistentVolumeClaimCondition> getConditions() {
    return conditions;
  }


  public void setConditions(List<IoK8sApiCoreV1PersistentVolumeClaimCondition> conditions) {
    this.conditions = conditions;
  }


  public IoK8sApiCoreV1PersistentVolumeClaimStatus phase(String phase) {
    
    this.phase = phase;
    return this;
  }

   /**
   * Get phase
   * @return phase
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPhase() {
    return phase;
  }


  public void setPhase(String phase) {
    this.phase = phase;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoK8sApiCoreV1PersistentVolumeClaimStatus ioK8sApiCoreV1PersistentVolumeClaimStatus = (IoK8sApiCoreV1PersistentVolumeClaimStatus) o;
    return Objects.equals(this.accessModes, ioK8sApiCoreV1PersistentVolumeClaimStatus.accessModes) &&
        Objects.equals(this.capacity, ioK8sApiCoreV1PersistentVolumeClaimStatus.capacity) &&
        Objects.equals(this.conditions, ioK8sApiCoreV1PersistentVolumeClaimStatus.conditions) &&
        Objects.equals(this.phase, ioK8sApiCoreV1PersistentVolumeClaimStatus.phase);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessModes, capacity, conditions, phase);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoK8sApiCoreV1PersistentVolumeClaimStatus {\n");
    sb.append("    accessModes: ").append(toIndentedString(accessModes)).append("\n");
    sb.append("    capacity: ").append(toIndentedString(capacity)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

